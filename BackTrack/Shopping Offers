class Solution {
public:
    int shoppingOffers(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        //filter out bad special offers
        vector<vector<int>> validSpecial;
        for(auto& offer: special){
            int totalWithoutOffer =0;
            for(int i =0; i<price.size(); ++i){
                totalWithoutOffer += offer[i] * price[i];
            }
            if(totalWithoutOffer > offer.back()){
                validSpecial.push_back(offer);
            }
        }
        map<vector<int>, int> memo;
        return dfs(price, validSpecial, needs, memo);
        
    }
    private:
        int dfs(vector<int>& price, vector<vector<int>>& special, vector<int>& needs, map<vector<int>, int>& memo){
            if(memo.count(needs)){
                return memo[needs];
            }
            //base cost without any special offer
            int cost =0;
            for(int i =0; i<needs.size(); ++i){
                cost += needs[i] * price[i];
            }
            //try each special offer
            for(auto& offer: special){
                vector<int> newNeeds =  needs;
                bool valid = true;
                for(int i =0; i<needs.size(); ++i){
                    newNeeds[i] -= offer[i];
                    if(newNeeds[i] < 0){
                        valid = false;
                        break;
                    }
                }
                if(valid){
                    cost = min(cost, offer.back() + dfs(price, special, newNeeds, memo));

                }
            }
            memo[needs] = cost;
            return cost;
        }
};
