class Solution {
public:
    /*int solve(int n , vector<int>& days, vector<int>& costs, int index){
        //base case
        if(index >= n){
            return 0;
        }
        //day pass
        int option1 = costs[0] + solve(n, days, costs, index+1);
        //7 days
        int i;
        for(int i = index; i<n && days[i] <days[index] + 7; i++);
        int option2 = costs[i] + solve(n,days, costs, i);

        //30 days pass
        for(int i = index; i<n && days[i] < days[index] + 7;i++);
        int option3 = costs[2] + solve(n, days, costs, i);
        return min(option1, min(option2, option3));


    } */
    /*int solveMem(int n , vector<int>& days, vector<int>& costs, int index, vector<int>& dp){
        //base case
        if(index >= n){
            return 0;
        }
        if(dp[index] != -1){
            return dp[index];
        }
        //day pass
        int option1 = costs[0] + solveMem(n, days, costs, index+1, dp);
        //7 days
        int i;
        for(int i = index; i<n && days[i] <days[index] + 7; i++);
        int option2 = costs[i] + solveMem(n,days, costs, i, dp);

        //30 days pass
        for(int i = index; i<n && days[i] < days[index] + 7;i++);
        int option3 = costs[2] + solveMem(n, days, costs, i,dp);
        dp[index] =  min(option1, min(option2, option3));
        return dp[index];


    } */
    /*int solveTab(int n,vector<int>& days, vector<int>& costs){
        
        vector<int> dp(n+1, INT_MAX);
        dp[n] = 0;
        
    
        for(int k = n-1; k >= 0; k--) {
        // Option 1: 1-day pass
            int option1 = costs[0] + dp[k+1];
        
        // Option 2: 7-day pass
            int i;
            for(i = k; i < n && days[i] < days[k] + 7; i++);
            int option2 = costs[1] + dp[i];
        
        // Option 3: 30-day pass
            for(i = k; i < n && days[i] < days[k] + 30; i++);
            int option3 = costs[2] + dp[i];

            dp[k] = min(option1, min(option2, option3));

        }
        return dp[0];
    } */
    int mincostTickets(vector<int>& days, vector<int>& costs) {
        int n = days.size();
        //vector<int> dp(n+1, -1);
        
        //return solveMem(n, days, costs, 0, dp);
        //return solveTab(n, days, costs);
        int ans = 0;
        queue<pair<int, int>> month;
        queue<pair<int, int>> week;
        for(int day: days){
            while(!month.empty() && month.front().first + 30 <= day){
                month.pop();
            }
            while(!week.empty() && week.front().first +7 <=day){
                week.pop();
            }
            week.push(make_pair(day, ans+costs[1]));
            month.push(make_pair(day, ans+costs[2]));

            ans = min(ans+costs[0] ,min(week.front().second, month.front().second));
        }
        return ans;
        
    }
};
