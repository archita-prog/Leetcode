class Solution {
public:
    unordered_map<string, bool> mp;
    
    bool isScramble(string s1, string s2) {
        int n = s1.size();
        // Base cases
        if(s1 == s2) return true;
        if(n != s2.size()) return false;
        
        string key = s1 + " " + s2;
        if(mp.find(key) != mp.end()) return mp[key];
        
        // Character count check
        int count[26] = {0};
        for(int i = 0; i < n; i++) {
            count[s1[i]-'a']++;
            count[s2[i]-'a']--;
        }
        for(int i = 0; i < 26; i++) {
            if(count[i] != 0) return mp[key] = false;
        }
        
        // Check all possible splits
        for(int i = 1; i < n; i++) {
            // Case 1: No swap
            if(isScramble(s1.substr(0,i), s2.substr(0,i)) && 
               isScramble(s1.substr(i), s2.substr(i))) {
                return mp[key] = true;
            }
            // Case 2: With swap
            if(isScramble(s1.substr(0,i), s2.substr(n-i)) && 
               isScramble(s1.substr(i), s2.substr(0,n-i))) {
                return mp[key] = true;
            }
        }
        
        return mp[key] = false;
    }
};
