/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseEvenLengthGroups(ListNode* head) {
        if(!head || !head->next){
            return head;
        }
        ListNode* dummy = new ListNode(0);
        dummy->next = head;

        ListNode* prevTail = dummy;
        ListNode* current = head;
        int groupLength = 1;

        while(current){
            ListNode* groupHead = current;
            ListNode* groupTail = current;
            int count =1;

            while(groupTail->next && count < groupLength){
                groupTail = groupTail->next;
                count++;
            }
            ListNode* nextGroupHead = groupTail->next;
            if(count % 2 == 0){
                ListNode* prev = nextGroupHead;
                ListNode* curr = groupHead;
                while(curr != nextGroupHead){
                    ListNode* nextTemp = curr->next;
                    curr->next = prev;
                    prev = curr;
                    curr = nextTemp;
                }
                prevTail->next = groupTail;
                prevTail = groupHead;

            }
            else{
                prevTail = groupTail;
            }
            current = nextGroupHead;
            groupLength++;


        }
        ListNode* newHead = dummy->next;
        delete dummy;
        return newHead;
        
    }
};
