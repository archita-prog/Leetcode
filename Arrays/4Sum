class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        std::vector<std::vector<int>> ans;
        int n = nums.size();

        std::sort(nums.begin(), nums.end());

        for (int i = 0; i < n - 3; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) continue;

            for (int j = i + 1; j < n - 2; j++) {
                if (j > i + 1 && nums[j] == nums[j - 1]) continue;

                int li = j + 1;
                int ri = n - 1;

                while (li < ri) {
                    long long sum = static_cast<long long>(nums[i]) + nums[j] + nums[li] + nums[ri];

                    if (sum == target) {
                        ans.push_back({nums[i], nums[j], nums[li], nums[ri]});
                        li++;
                        ri--;

                        while (li < ri && nums[li] == nums[li - 1]) li++;
                        while (li < ri && nums[ri] == nums[ri + 1]) ri--;
                    } else if (sum < target) {
                        li++;
                    } else {
                        ri--;
                    }
                }
            }
        }

        return ans;
        
    }
};
