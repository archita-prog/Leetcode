class Solution {
public:
    void backtrack(vector<vector<int>>& result,vector<int>& current, vector<int>& candidates,int target,int index){
        if(target == 0){
            result.push_back(current);
            return;

        }
        for (int i = index; i < candidates.size(); i++) {
            // Skip duplicates: only consider the first occurrence of a duplicate element in this iteration
            if (i > index && candidates[i] == candidates[i - 1]) continue;

            // If the candidate exceeds the target, no point in continuing (array is sorted)
            if (candidates[i] > target) break;

            // Choose the candidate
            current.push_back(candidates[i]);
            backtrack(result, current, candidates, target - candidates[i], i + 1);
            current.pop_back(); // Backtrack
        }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        vector<vector<int>> result;
        vector<int> current;
        backtrack(result, current,candidates,target,0);
        return result;
        

    }
        
    
};
