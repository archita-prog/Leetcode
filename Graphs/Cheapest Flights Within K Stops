class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<int> dist(n, 1e9);
        dist[src] = 0;
        
        // We are allowed at most k stops, which means k+1 edges
        for (int i = 0; i <= k; i++) {
            vector<int> temp(dist); // Create a copy of current distances
            for (auto& flight : flights) {
                int u = flight[0];
                int v = flight[1];
                int wt = flight[2];
                
                if (dist[u] != 1e9 && dist[u] + wt < temp[v]) {
                    temp[v] = dist[u] + wt;
                }
            }
            dist = temp; // Update after each iteration
        }
        
        return dist[dst] == 1e9 ? -1 : dist[dst];
    }
};
