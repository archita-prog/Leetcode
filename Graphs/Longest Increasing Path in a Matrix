class Solution {
public:
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        int m = matrix.size();
        if(m==0) return 0;
        int n = matrix[0].size();
        vector<vector<int>> dp(m, vector<int>(n,0));
        int ans =0;
        for(int i =0; i<m; ++i){
            for(int j =0; j<n; ++j){
                ans = max(ans, dfs(matrix, i, j, dp));
            }
        }
        return ans;
        
    }
private:
    int dfs(vector<vector<int>>& matrix, int i, int j, vector<vector<int>>& dp){
        if(dp[i][j] != 0) return dp[i][j];
        int m = matrix.size();
        int n = matrix[0].size();
        int dirs[4][2] = {{-1, 0},{1,0},{0,-1},{0,1}};
        int maxPath =1;
        for(auto& dir: dirs){
            int x = i + dir[0];
            int y = j + dir[1];
            if(x >= 0 && x< m && y >= 0 && y < n && matrix[x][y] > matrix[i][j]){
                maxPath = max(maxPath, 1+ dfs(matrix, x, y, dp));
            }
        }
        dp[i][j] = maxPath;
        return maxPath;
    }
};
