class Solution {
public:
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int n = edges.size();
        vector<int> parent(n+1);

        for(int i =1; i<=n ; i++){
            parent[i] = i;
        }
        for(const auto& edge: edges){
            int u = edge[0];
            int v = edge[1];

            //find roots of bith nodes
            int rootU = find(parent, u);
            int rootV = find(parent, v);

            if(rootU == rootV){
                //already connect - this edge creates a cycle
                return edge;
            }
            else{
                //union the two components
                parent[rootU] = rootV;
            }
        }
        return {};
        
    }
private:
    int find(vector<int>& parent, int node){
        //find root with path conenction
        if(parent[node] != node){
            parent[node] = find(parent, parent[node]);
        }
        return parent[node];
    }

};
