/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<vector<int>> result;
        vector<int> currentPath;
        dfs(root, targetSum, currentPath, result);    
        return result;
    }
    void dfs(TreeNode* Node, int remainingSum, vector<int>& currentPath, vector<vector<int>>& result){
        if(!Node) return;
        currentPath.push_back(Node->val);
        remainingSum -= Node->val;
        if(!Node->left && !Node->right && remainingSum == 0){
            result.push_back(currentPath);
        }
        dfs(Node->left,remainingSum,currentPath, result);
        dfs(Node->right, remainingSum, currentPath, result);
        currentPath.pop_back();
    }

};
