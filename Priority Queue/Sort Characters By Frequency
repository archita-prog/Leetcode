class Solution {
public:
    /*string frequencySort(string s) {
        //count frequency of each character
        unordered_map<char, int> freq;
        for(char c : s){
            freq[c]++;
        }
        //create vector of characters
        vector<pair<char, int>> chars;
        for(auto& [ch, count]: freq){
            chars.push_back({ch, count});
        }
        //sort by frequency descending
        sort(chars.begin(), chars.end(), [](const pair<char, int>& a, const pair<char, int>& b){
            return a.second > b.second;
        });
        //build result string
        string result;
        for(auto& [ch, count]:  chars){
            result.append(count, ch); // append count copies of ch
        }
        return result;

    }
}; */
string frequencySort(string s) {
        //count frequency
        unordered_map<char, int> freq;
        for(char c: s){
            freq[c]++;
        }
        //max-heap based on frequency
        priority_queue<pair<int, char>> maxHeap;
        for(auto& [ch, count]: freq){
            maxHeap.push({count, ch});
        }
        //build string
        string result;
        while(!maxHeap.empty()){
            auto [count, ch] = maxHeap.top();
            maxHeap.pop();
            result.append(count, ch);
        }
        return result;

    }
}; 
