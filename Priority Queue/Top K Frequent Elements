class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        //count freuquencies
        unordered_map<int, int> freq;
        for(int num : nums){
            freq[num]++;
        }
        auto comp = [](const pair<int, int>& a, const pair<int, int>& b){
            return a.second > b.second;
        };
        priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(comp)> pq(comp);
        for(auto& [num, count] : freq){
            pq.push({num, count});
            if(pq.size() > k){
                pq.pop();
            }
        }
        vector<int> result;
        while(!pq.empty()){
            result.push_back(pq.top().first);
            pq.pop();
        }
        return result;
    }
};
