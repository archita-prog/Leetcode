class Solution {
public:
    double mincostToHireWorkers(vector<int>& quality, vector<int>& wage, int k) {
        int n = quality.size();
        vector<pair<double, int>> workers;

        //create pairs of (ratio, quality)
        for(int i =0; i<n; i++){
            double ratio = (double)wage[i] / quality[i];
            workers.push_back({ratio, quality[i]});
        }
        //sort workers by ratio
        sort(workers.begin(), workers.end());

        //max heap to store qualities 
        priority_queue<int> maxHeap;
        int qualitySum = 0;
        double minCost = numeric_limits<double> :: max();

        for(auto& worker : workers){
            double ratio = worker.first;
            int q = worker.second;

            //add currnent worker's quality to heap and sum
            maxHeap.push(q);
            qualitySum += q;

            //if we have more than k workeers, remove the one with highest quality
            if(maxHeap.size() > k){
                qualitySum -= maxHeap.top();
                maxHeap.pop();
            }
            //if we have exactly k workers, calculate cost
            if(maxHeap.size() == k){
                minCost = min(minCost, ratio * qualitySum);
            }
        }
        return minCost;
        
    }
};
