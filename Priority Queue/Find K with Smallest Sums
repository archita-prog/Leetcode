#include <vector>
#include <queue>
#include <set>
using namespace std;

class Solution {
public:
    vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
        vector<vector<int>> result;
        if (nums1.empty() || nums2.empty() || k == 0) {
            return result;
        }
        
        // Min-heap: stores (sum, index_in_nums1, index_in_nums2)
        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> minHeap;
        
        // Push the first element of nums1 with all elements of nums2
        for (int j = 0; j < nums2.size() && j < k; j++) {
            minHeap.push({nums1[0] + nums2[j], 0, j});
        }
        
        while (k > 0 && !minHeap.empty()) {
            auto top = minHeap.top();
            minHeap.pop();
            
            int i = top[1];
            int j = top[2];
            
            result.push_back({nums1[i], nums2[j]});
            k--;
            
            // If we haven't reached the end of nums1, push the next element from nums1
            // with the same element from nums2
            if (i + 1 < nums1.size()) {
                minHeap.push({nums1[i + 1] + nums2[j], i + 1, j});
            }
        }
        
        return result;
    }
};
