#include <vector>
using namespace std;

class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        mergeSort(nums, 0, nums.size() - 1);
        return nums;
    }
    
private:
    void mergeSort(vector<int>& nums, int left, int right) {
        if (left >= right) return;
        
        int mid = left + (right - left) / 2;
        
        // Recursively sort both halves
        mergeSort(nums, left, mid);
        mergeSort(nums, mid + 1, right);
        
        // Merge the sorted halves
        merge(nums, left, mid, right);
    }
    
    void merge(vector<int>& nums, int left, int mid, int right) {
        int leftSize = mid - left + 1;
        int rightSize = right - mid;
        
        // Create temporary arrays
        vector<int> leftArr(leftSize);
        vector<int> rightArr(rightSize);
        
        // Copy data to temporary arrays
        for (int i = 0; i < leftSize; i++) {
            leftArr[i] = nums[left + i];
        }
        for (int j = 0; j < rightSize; j++) {
            rightArr[j] = nums[mid + 1 + j];
        }
        
        // Merge the temporary arrays back into nums[left..right]
        int i = 0, j = 0, k = left;
        
        while (i < leftSize && j < rightSize) {
            if (leftArr[i] <= rightArr[j]) {
                nums[k] = leftArr[i];
                i++;
            } else {
                nums[k] = rightArr[j];
                j++;
            }
            k++;
        }
        
        // Copy remaining elements from leftArr
        while (i < leftSize) {
            nums[k] = leftArr[i];
            i++;
            k++;
        }
        
        // Copy remaining elements from rightArr
        while (j < rightSize) {
            nums[k] = rightArr[j];
            j++;
            k++;
        }
    }
};
