class Solution {
public:
    vector<int> kthSmallestPrimeFraction(vector<int>& arr, int k) {
        int n = arr.size();
        priority_queue<vector<double>, vector<vector<double>>, greater<vector<double>>> pq;
        for(int j =1; j <n; j++){
            double fraction = (double)arr[0] / arr[j];
            pq.push({fraction, (double)0, (double)j});
        }
        //extract k-1 smallest fractions
        for(int count =0; count<k-1; count++){
            vector<double> current = pq.top();
            pq.pop();

            int i = current [1];
            int j = current[2];

            if(i+1 <j){
                double fraction = (double)arr[i+1]/ arr[j];
                pq.push({fraction, (double)(i+1), (double)j});
            }
        }
        vector<double> result = pq.top();
        return {arr[(int)result[1]], arr[(int)result[2]]};
        
    }
};
